apply plugin: 'distribution'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "net.ossindex.audit"

defaultTasks 'clean', 'distZip', 'distTar'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'org.gluu'
version = project.version

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/thirdparty" }
    maven { url "https://ox.gluu.org/maven" }
    maven { url "https://plugins.gradle.org/m2/" }
}

test.onlyIf { !Boolean.getBoolean('skip.tests') }

configurations {
    provided
    compile.extendsFrom provided
}
configurations.compile.transitive = false

dependencies {
    classpath "gradle.plugin.net.ossindex:ossindex-gradle-plugin:0.4.11"
    
    compile "org.gluu:oxauth-client:$project.oxAuthVersion"
    compile "org.gluu:oxtrust-openid-auth-client:$project.oxAuthVersion"
    compile "org.gluu:oxcore-util:$project.oxCoreVersion"
    compile "org.gluu:oxcore-persistence-ldap:$project.oxCoreVersion"

    provided "javax.servlet:javax.servlet-api:$project.servletVersion"
    provided "net.shibboleth.idp:idp-authn-api:$project.shibIdpVersion"
    provided "net.shibboleth.idp:idp-saml-api:$project.shibIdpVersion"
    provided "commons-lang:commons-lang:$project.commonLangVersion"

    testCompile "junit:junit:$project.junitVersion"
    testCompile "org.mockito:mockito-all:$project.mockitoVersion"
    testCompile "org.powermock:powermock-mockito-release-full:$project.powermockVersion"
}

distributions {
    main {
        baseName = 'shib-oxauth-authn3'
        contents {
            from { 'build/dist-tmp' }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task prepDist() {
    dependsOn jar

    inputs.dir 'IDP_HOME/'
    inputs.file 'LICENSE'

    outputs.dir 'build/dist-tmp/'

    doLast {
        copy {
            from('IDP_HOME')
            from('LICENSE')
            into 'build/dist-tmp/'
        }
        copy {
            from (configurations.compile - configurations.provided)
            from jar
            into 'build/dist-tmp/edit-webapp/WEB-INF/lib'
        }
    }
}

distTar.dependsOn prepDist
distZip.dependsOn prepDist
